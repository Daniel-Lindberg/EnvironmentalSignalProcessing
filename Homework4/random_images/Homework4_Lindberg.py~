# Author: Daniel Lindberg

# Native python modules
import os
import skimage
import math
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import numpy as np
import scipy.io

# Native python submodules
from PIL import Image
from skimage.filters.rank import entropy
from skimage.io import imread
from skimage.morphology import disk
from sklearn.decomposition import PCA

def getCovariances(tmp_img):
	new_img = np.zeros((tmp_img.size[0], tmp_img.size[1]))
	for x in range(tmp_img.size[0]):
		for y in range(tmp_img.size[1]):
			new_img[x,y] = sum(tmp_img.getpixel((x,y)))/3.0
	covariance = np.cov(new_img)
	return covariance


def takeEntropy(some_list, some_dir):
	eb_list = []
	all_covariances = []
	for each_item in some_list:
		img = Image.open(some_dir+each_item)
		img_covariance = getCovariances(img)
		all_covariances.append(img_covariance)
		pix = np.array(img.getdata(), dtype=np.uint8)	
		#img = np.array(img)	
		entropy_img = entropy(pix, disk(300, dtype=np.uint8))
		expected_bits = entropy_img/math.log(2)
		temp_PCA = PCA()
		temp_PCA.fit(expected_bits)
		fig = plt.figure()
		plt.subplot(3,1,1)
		plt.title("Original Image")
		plt.imshow(img)
		plt.subplot(3,1,2)
		plt.title("Entropy Expected Bits")
		plt.plot(expected_bits)
		plt.subplot(3,1,3)
		plt.title("PCA Components")
		plt.ylabel("Principal Components")
		plt.xlabel("Planes")
		plt.plot(temp_PCA.components_)
		blue_patch = mpatches.Patch(color='blue', label='1st plane')
		orange_patch = mpatches.Patch(color='orange', label='2nd plane')
		green_patch = mpatches.Patch(color='green', label='3rd plane')
		plt.legend(handles=[blue_patch, orange_patch, green_patch])
		fig.subplots_adjust(hspace=0.5)
		plt.savefig(some_dir+(each_item.split(".")[0])+"_expected_bits.png")
		print each_item, "[bits, pca]:", expected_bits.shape, ",", temp_PCA.components_.shape
		eb_list.append(expected_bits.shape[0])
	return eb_list, all_covariances

# Our two Directories
random_images_dir = "random_images/"
original_images_dir = "original_images/"

# get all of the files listed
all_files = os.listdir(random_images_dir)
all_files.sort()

original_files = os.listdir(original_images_dir)
original_files.sort()

# Refine all of the lists
finalized_list = []
for x in range(len(all_files)):
	if (all_files[x].endswith("512.jpg")):
		finalized_list.append(all_files[x])

original_finalized_list = []
for x in range(len(original_files)):
	if (original_files[x].endswith("512.jpg")):
		original_finalized_list.append(original_files[x])

# List of expected bits
random_eb_list = []
original_eb_list = []

random_eb_list, random_covariances = takeEntropy(finalized_list, random_images_dir)
original_eb_list, original_covariances = takeEntropy(original_finalized_list, original_images_dir)

# This is for part 1
print random_eb_list
print original_eb_list

indexer = 0
for sub_cov in random_covariances:
	print "------------------\nWorking on image:", finalized_list[indexer].split(".")[0]
	print "Part 2:", sub_cov.shape, np.average(sub_cov)
	temp_PCA = PCA()
	temp_PCA.fit(sub_cov)
	temp_components = temp_PCA.components_
	plt.figure()
	plt.subplot(1,2,1)
	plt.title("Image form Principal Components")
	plt.imshow(temp_components)
	plt.subplot(1,2,2)
	plt.title("Scatterplot form Principal Components")
	plt.plot(temp_components)
	plt.xlabel("Principal Components over each voariance component")
	plt.ylabel("Intensity of Component")
	plt.savefig(random_images_dir+finalized_list[indexer].split(".")[0]+"_PCA_Cov.png")
	print "Part 3:", finalized_list[indexer].split(".")[0], ":",  np.std(temp_components)
	temp_xy_components = []
	for x in range(temp_components.shape[0]):
		for y in range(temp_components.shape[1]):
			temp_xy_components.append((temp_components[x,y], (x,y)))
	temp_xy_components.sort(key=lambda x:x[0])	
	print "Part 4 Three largest:", temp_xy_components[-1], temp_xy_components[-2], temp_xy_components[-3]
	rgb_utility = np.zeros((temp_components.shape[0], temp_components.shape[1], 3))
	for x in range(temp_components.shape[0]):
		for y in range(temp_componenets.shape[0]):
			rgb_utility[x,y] = [temp_xy_components[-1][0]*255, temp_xy_components[-2][0]*255, temp_xy_components[-3][0]*255]
	plt.figure()
	plt.imshow(rgb_utility)
	plt.savefig(original_images_dir+original_finalized_list[indexer].split(".")[0]+"_RGB_UTIL.png")
	indexer +=1
	
print "doing originals now"
indexer = 0
for sub_cov in original_covariances:
	print "------------------\nWorking on image:", original_finalized_list[indexer].split(".")[0]
	print "Part 2:", sub_cov.shape, np.average(sub_cov)
	temp_PCA = PCA()
	temp_PCA.fit(sub_cov)
	temp_components = temp_PCA.components_
	plt.figure()
	plt.subplot(1,2,1)
	plt.title("Image form Principal Components")
	plt.imshow(temp_components)
	plt.subplot(1,2,2)
	plt.title("Scatterplot form Principal Components")
	plt.plot(temp_components)
	plt.xlabel("Principal Components over each voariance component")
	plt.ylabel("Intensity of Component")
	plt.savefig(original_images_dir+original_finalized_list[indexer].split(".")[0]+"_PCA_Cov.png")
	print "Part 3:", original_finalized_list[indexer].split(".")[0], ":",  np.std(temp_components)
	temp_xy_components = []
	for x in range(temp_components.shape[0]):
		for y in range(temp_components.shape[1]):
			temp_xy_components.append((temp_components[x,y], (x,y)))
	temp_xy_components.sort(key=lambda x:x[0])	
	print "Part 4 Three largest:", temp_xy_components[-1], temp_xy_components[-2], temp_xy_components[-3]
	rgb_utility = np.zeros((temp_components.shape[0], temp_components.shape[1], 3))
	for x in range(temp_components.shape[0]):
		for y in range(temp_componenets.shape[0]):
			rgb_utility[x,y] = [temp_xy_components[-1][0]*255, temp_xy_components[-2][0]*255, temp_xy_components[-3][0]*255]
	plt.figure()
	plt.imshow(rgb_utility)
	plt.savefig(original_images_dir+original_finalized_list[indexer].split(".")[0]+"_RGB_UTIL.png")
	indexer +=1

